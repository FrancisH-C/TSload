{"cells":[{"cell_type":"markdown","metadata":{},"source":["## Multiprocess\n\n"]},{"cell_type":"markdown","metadata":{},"source":["### Initialization\n\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["%load_ext autoreload\n%autoreload 2\nimport numpy as np\nimport pandas as pd\nfrom TSload import TSloader, LoadersProcess"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["path = \"data/example_multiprocess\"\nsplit = [\"split0\", \"split1\"]\npermission = \"overwrite\"  # Overwrite is used for repeated execution"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"#+begin_example\n      ID timestamp  feature0\n0  name1         0         0\n1  name1         1         1\n2  name1         2         2\n3  name1         3         3\n4  name1         4         4\n5  name2         5         5\n6  name2         6         6\n7  name2         7         7\n8  name2         8         8\n9  name2         9         9\n      ID  timestamp  feature1\n0  name1         10         0\n1  name1         11         1\n2  name1         12         2\n3  name1         13         3\n4  name1         14         4\n5  name2         15         5\n6  name2         16         6\n7  name2         17         7\n8  name2         18         8\n9  name2         19         9\n#+end_example"}],"source":["datatype=\"splitted_data\"\nd = {\"ID\": np.hstack(([\"name1\" for _ in range(5)], [\"name2\" for _ in range(5)])),\n    \"timestamp\": list(map(str, range(0,10))),\n     \"feature0\": list(range(10)), \"feature1\": list(range(10))}\ndf1 = pd.DataFrame(data=d).drop(\"feature1\", axis=1)\ndf2 = df1.copy()\ndf2 = pd.DataFrame(data=d).drop(\"feature0\", axis=1)\ndf2[\"timestamp\"] = df2[\"timestamp\"].map(int) + 10\nprint(df1)\nprint(df2)"]},{"cell_type":"markdown","metadata":{},"source":["### Multiprocessing writing\n\n"]},{"cell_type":"markdown","metadata":{},"source":["##### Set the splitting scheme\n\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["metaloader = TSloader(path, datatype, split=split, permission=permission)\nmetaloader.write()"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"split             IDs              features\ndatatype                                                             \nsplitted_data  [split0, split1]  [name2, name1]  [feature0, feature1]"}],"source":["metaloader.metadata"]},{"cell_type":"markdown","metadata":{},"source":["##### Initialize the loaders\n\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["loader1 = TSloader(path, datatype, subsplit_indices=[0],\n                   permission=permission, parallel=True)\nloader2 = TSloader(path, datatype, subsplit_indices=[1],\n                   permission=permission, parallel=True)\n\nloader1.initialize_datatype(df1)\nloader2.initialize_datatype(df2)"]},{"cell_type":"markdown","metadata":{},"source":["##### Write\n\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"#+begin_example\n                 feature0\nID    timestamp          \nname1 0                 0\n      1                 1\n      2                 2\n      3                 3\n      4                 4\nname2 5                 5\n      6                 6\n      7                 7\n      8                 8\n      9                 9\n                 feature1\nID    timestamp          \nname1 10                0\n      11                1\n      12                2\n      13                3\n      14                4\nname2 15                5\n      16                6\n      17                7\n      18                8\n      19                9\n#+end_example"}],"source":["p = LoadersProcess([loader1, loader2], lambda loader : print(loader.df))\np.start()\np.join()\np = LoadersProcess([loader1, loader2], lambda loader : loader.write())\np.start()\np.join()"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"split             IDs              features\ndatatype                                                             \nsplitted_data  [split0, split1]  [name1, name2]  [feature0, feature1]"}],"source":["metaloader.merge_metadata(rm=False)\nprint(metaloader.metadata)"]},{"cell_type":"markdown","metadata":{},"source":["### Multiprocessing loading\n\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"split             IDs              features\ndatatype                                                             \nsplitted_data  [split0, split1]  [name1, name2]  [feature0, feature1]"}],"source":["loader1 = TSloader(path, datatype, \n                   permission=permission, parallel=False)\nloader1.metadata"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["loader1 = TSloader(path, datatype, subsplit_indices=[0],\n                   permission=permission, parallel=False)\nloader2 = TSloader(path, datatype, subsplit_indices=[1],\n                   permission=permission, parallel=False)"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":"#+begin_example\n                 feature0\nID    timestamp          \nname1 0                 0\n      1                 1\n      2                 2\n      3                 3\n      4                 4\nname2 5                 5\n      6                 6\n      7                 7\n      8                 8\n      9                 9\n                 feature1\nID    timestamp          \nname1 10                0\n      11                1\n      12                2\n      13                3\n      14                4\nname2 15                5\n      16                6\n      17                7\n      18                8\n      19                9\n#+end_example"}],"source":["p = LoadersProcess([loader1, loader2], lambda loader : loader.load())\np.start()\np.join()\np = LoadersProcess([loader1, loader2], lambda loader : print(loader.df))\np.start()\np.join()"]}],"metadata":{"org":null,"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"}},"nbformat":4,"nbformat_minor":0}
